= Introduction =

jjplot is intended to be a replacement for ggplot2 written entirely in base graphics.  The hope is that it will be fast and functional.  Note that semantics may be slightly different that ggplot2 in places.

*ggplot2 is still _way_ more functional than jjplot, so take comparisons with a grain of salt*

= Installation =
Simply download the source from the "Source" tab above.  In R, all you need to do is `source("jjplot.R")` and you're ready to go.  See jjplot.test.R (or documentation below) for example usages.

= Todo =
I will add functionality as I need it.  Here is the short list:

  * Numeric color scales
  * Expose methods to set title and axis titles/labels
  * geom_fill or geom_tile
  * Faceting into multiple graphs
  * Legends
  * scale_size
  * manual color scales
  * scale_shape

= Examples =
{{{
> qplot.fast(x, f, data = df,
             alpha = 0.10, color = f,
             qplot.jitter(yfactor = 1, xfactor=1),
             qplot.point()))
}}}
http://jjplot.googlecode.com/files/jjplot_test_001.png

{{{
> qplot.fast(x + 2, y, data = df,
             alpha = 0.10, color = f,
             qplot.point(),
             qplot.facet(qplot.fit(), facet = f),
             qplot.abline(),
             qplot.fun.y(mean),
             qplot.hline(lty = "dashed")))
}}}
http://jjplot.googlecode.com/files/jjplot_test_002.png

= Concepts =
The workhorse function of jjplot is `qplot.fast`, which takes the following formals:

{{{
  qplot.fast(x = NULL, y = NULL, data = NULL, alpha = NULL, color = NULL, ...)
}}}

  * `x` - An expression to map to the x-axis.
  * `y` - An expression to map to the y-axis.
  * `data` - A data frame in whose context expressions will be evaluated.
  * `alpha` - An expression to map to the alpha channel.
  * `color` - An expression to map to the colors of each element in the data frame.  This expression must evaluate to a factor; colors will be chosen automatically for each factor and mapped to appropriate plot elements.
  * `...` - Statistic and geometry functions to apply to the data.

After the mapping performed by named arguments, each statistic and geometry function is successively applied.  Statistic functions can be understood as transformations of the data.

== Statistics == 

= Performance Comparison =
== jjplot ==
{{{
> system.time(qplot.fast(x, f, data = df,
                         alpha = 0.10, color = f,
                         qplot.jitter(yfactor = 1, xfactor=1),
                         qplot.point()))
utilisateur     système      écoulé 
      0.249       0.006       0.267 

> system.time(qplot.fast(x + 2, y, data = df,
                         alpha = 0.10, color = f,
                         qplot.point(),
                         qplot.facet(qplot.fit(), facet = f),
                         qplot.abline(),
                         qplot.fun.y(mean),
                         qplot.hline(lty = "dashed")))
utilisateur     système      écoulé 
      0.355       0.011       0.388 
}}}

== ggplot2 ==
{{{
> system.time(print(qplot(x, f, data = df,
                          alpha = I(0.1), colour =f,
                          geom = "jitter")))
utilisateur     système      écoulé 
      1.629       0.023       1.669 

> system.time(print(qplot(x + 2, y, data = df,
                          alpha = I(0.1), colour = f) +
                    geom_smooth(method = "lm") +
                    geom_hline(aes(yintercept = mean(y)))))
utilisateur     système      écoulé 
      2.659       0.045       2.718 
}}}